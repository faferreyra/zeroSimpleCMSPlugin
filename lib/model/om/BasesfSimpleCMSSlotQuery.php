<?php


/**
 * Base class that represents a query for the 'sf_simple_cms_slot' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Tue Jan 25 07:28:17 2011
 *
 * @method     sfSimpleCMSSlotQuery orderByPageId($order = Criteria::ASC) Order by the page_id column
 * @method     sfSimpleCMSSlotQuery orderByCulture($order = Criteria::ASC) Order by the culture column
 * @method     sfSimpleCMSSlotQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method     sfSimpleCMSSlotQuery orderByType($order = Criteria::ASC) Order by the type column
 * @method     sfSimpleCMSSlotQuery orderByValue($order = Criteria::ASC) Order by the value column
 * @method     sfSimpleCMSSlotQuery orderByDeletedAt($order = Criteria::ASC) Order by the deleted_at column
 * @method     sfSimpleCMSSlotQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     sfSimpleCMSSlotQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     sfSimpleCMSSlotQuery groupByPageId() Group by the page_id column
 * @method     sfSimpleCMSSlotQuery groupByCulture() Group by the culture column
 * @method     sfSimpleCMSSlotQuery groupByName() Group by the name column
 * @method     sfSimpleCMSSlotQuery groupByType() Group by the type column
 * @method     sfSimpleCMSSlotQuery groupByValue() Group by the value column
 * @method     sfSimpleCMSSlotQuery groupByDeletedAt() Group by the deleted_at column
 * @method     sfSimpleCMSSlotQuery groupByCreatedAt() Group by the created_at column
 * @method     sfSimpleCMSSlotQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     sfSimpleCMSSlotQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     sfSimpleCMSSlotQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     sfSimpleCMSSlotQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     sfSimpleCMSSlotQuery leftJoinsfSimpleCMSPage($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfSimpleCMSPage relation
 * @method     sfSimpleCMSSlotQuery rightJoinsfSimpleCMSPage($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfSimpleCMSPage relation
 * @method     sfSimpleCMSSlotQuery innerJoinsfSimpleCMSPage($relationAlias = null) Adds a INNER JOIN clause to the query using the sfSimpleCMSPage relation
 *
 * @method     sfSimpleCMSSlot findOne(PropelPDO $con = null) Return the first sfSimpleCMSSlot matching the query
 * @method     sfSimpleCMSSlot findOneOrCreate(PropelPDO $con = null) Return the first sfSimpleCMSSlot matching the query, or a new sfSimpleCMSSlot object populated from the query conditions when no match is found
 *
 * @method     sfSimpleCMSSlot findOneByPageId(int $page_id) Return the first sfSimpleCMSSlot filtered by the page_id column
 * @method     sfSimpleCMSSlot findOneByCulture(string $culture) Return the first sfSimpleCMSSlot filtered by the culture column
 * @method     sfSimpleCMSSlot findOneByName(string $name) Return the first sfSimpleCMSSlot filtered by the name column
 * @method     sfSimpleCMSSlot findOneByType(string $type) Return the first sfSimpleCMSSlot filtered by the type column
 * @method     sfSimpleCMSSlot findOneByValue(string $value) Return the first sfSimpleCMSSlot filtered by the value column
 * @method     sfSimpleCMSSlot findOneByDeletedAt(string $deleted_at) Return the first sfSimpleCMSSlot filtered by the deleted_at column
 * @method     sfSimpleCMSSlot findOneByCreatedAt(string $created_at) Return the first sfSimpleCMSSlot filtered by the created_at column
 * @method     sfSimpleCMSSlot findOneByUpdatedAt(string $updated_at) Return the first sfSimpleCMSSlot filtered by the updated_at column
 *
 * @method     array findByPageId(int $page_id) Return sfSimpleCMSSlot objects filtered by the page_id column
 * @method     array findByCulture(string $culture) Return sfSimpleCMSSlot objects filtered by the culture column
 * @method     array findByName(string $name) Return sfSimpleCMSSlot objects filtered by the name column
 * @method     array findByType(string $type) Return sfSimpleCMSSlot objects filtered by the type column
 * @method     array findByValue(string $value) Return sfSimpleCMSSlot objects filtered by the value column
 * @method     array findByDeletedAt(string $deleted_at) Return sfSimpleCMSSlot objects filtered by the deleted_at column
 * @method     array findByCreatedAt(string $created_at) Return sfSimpleCMSSlot objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return sfSimpleCMSSlot objects filtered by the updated_at column
 *
 * @package    propel.generator.plugins.zeroSimpleCMSPlugin.lib.model.om
 */
abstract class BasesfSimpleCMSSlotQuery extends ModelCriteria
{

	// soft_delete behavior
	protected static $softDelete = true;
	protected $localSoftDelete = true;

	/**
	 * Initializes internal state of BasesfSimpleCMSSlotQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'sfSimpleCMSSlot', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new sfSimpleCMSSlotQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    sfSimpleCMSSlotQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof sfSimpleCMSSlotQuery) {
			return $criteria;
		}
		$query = new sfSimpleCMSSlotQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * <code>
	 * $obj = $c->findPk(array(12, 34, 56), $con);
	 * </code>
	 * @param     array[$page_id, $culture, $name] $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    sfSimpleCMSSlot|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = sfSimpleCMSSlotPeer::getInstanceFromPool(serialize(array((string) $key[0], (string) $key[1], (string) $key[2]))))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		$this->addUsingAlias(sfSimpleCMSSlotPeer::PAGE_ID, $key[0], Criteria::EQUAL);
		$this->addUsingAlias(sfSimpleCMSSlotPeer::CULTURE, $key[1], Criteria::EQUAL);
		$this->addUsingAlias(sfSimpleCMSSlotPeer::NAME, $key[2], Criteria::EQUAL);
		
		return $this;
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		if (empty($keys)) {
			return $this->add(null, '1<>1', Criteria::CUSTOM);
		}
		foreach ($keys as $key) {
			$cton0 = $this->getNewCriterion(sfSimpleCMSSlotPeer::PAGE_ID, $key[0], Criteria::EQUAL);
			$cton1 = $this->getNewCriterion(sfSimpleCMSSlotPeer::CULTURE, $key[1], Criteria::EQUAL);
			$cton0->addAnd($cton1);
			$cton2 = $this->getNewCriterion(sfSimpleCMSSlotPeer::NAME, $key[2], Criteria::EQUAL);
			$cton0->addAnd($cton2);
			$this->addOr($cton0);
		}
		
		return $this;
	}

	/**
	 * Filter the query on the page_id column
	 * 
	 * @param     int|array $pageId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByPageId($pageId = null, $comparison = null)
	{
		if (is_array($pageId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::PAGE_ID, $pageId, $comparison);
	}

	/**
	 * Filter the query on the culture column
	 * 
	 * @param     string $culture The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByCulture($culture = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($culture)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $culture)) {
				$culture = str_replace('*', '%', $culture);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::CULTURE, $culture, $comparison);
	}

	/**
	 * Filter the query on the name column
	 * 
	 * @param     string $name The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByName($name = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($name)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $name)) {
				$name = str_replace('*', '%', $name);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::NAME, $name, $comparison);
	}

	/**
	 * Filter the query on the type column
	 * 
	 * @param     string $type The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByType($type = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($type)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $type)) {
				$type = str_replace('*', '%', $type);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::TYPE, $type, $comparison);
	}

	/**
	 * Filter the query on the value column
	 * 
	 * @param     string $value The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByValue($value = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($value)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $value)) {
				$value = str_replace('*', '%', $value);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::VALUE, $value, $comparison);
	}

	/**
	 * Filter the query on the deleted_at column
	 * 
	 * @param     string|array $deletedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByDeletedAt($deletedAt = null, $comparison = null)
	{
		if (is_array($deletedAt)) {
			$useMinMax = false;
			if (isset($deletedAt['min'])) {
				$this->addUsingAlias(sfSimpleCMSSlotPeer::DELETED_AT, $deletedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($deletedAt['max'])) {
				$this->addUsingAlias(sfSimpleCMSSlotPeer::DELETED_AT, $deletedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::DELETED_AT, $deletedAt, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $createdAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(sfSimpleCMSSlotPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(sfSimpleCMSSlotPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 * 
	 * @param     string|array $updatedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(sfSimpleCMSSlotPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(sfSimpleCMSSlotPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related sfSimpleCMSPage object
	 *
	 * @param     sfSimpleCMSPage $sfSimpleCMSPage  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function filterBysfSimpleCMSPage($sfSimpleCMSPage, $comparison = null)
	{
		return $this
			->addUsingAlias(sfSimpleCMSSlotPeer::PAGE_ID, $sfSimpleCMSPage->getId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the sfSimpleCMSPage relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function joinsfSimpleCMSPage($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('sfSimpleCMSPage');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'sfSimpleCMSPage');
		}
		
		return $this;
	}

	/**
	 * Use the sfSimpleCMSPage relation sfSimpleCMSPage object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfSimpleCMSPageQuery A secondary query class using the current class as primary query
	 */
	public function usesfSimpleCMSPageQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinsfSimpleCMSPage($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'sfSimpleCMSPage', 'sfSimpleCMSPageQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     sfSimpleCMSSlot $sfSimpleCMSSlot Object to remove from the list of results
	 *
	 * @return    sfSimpleCMSSlotQuery The current query, for fluid interface
	 */
	public function prune($sfSimpleCMSSlot = null)
	{
		if ($sfSimpleCMSSlot) {
			$this->addCond('pruneCond0', $this->getAliasedColName(sfSimpleCMSSlotPeer::PAGE_ID), $sfSimpleCMSSlot->getPageId(), Criteria::NOT_EQUAL);
			$this->addCond('pruneCond1', $this->getAliasedColName(sfSimpleCMSSlotPeer::CULTURE), $sfSimpleCMSSlot->getCulture(), Criteria::NOT_EQUAL);
			$this->addCond('pruneCond2', $this->getAliasedColName(sfSimpleCMSSlotPeer::NAME), $sfSimpleCMSSlot->getName(), Criteria::NOT_EQUAL);
			$this->combine(array('pruneCond0', 'pruneCond1', 'pruneCond2'), Criteria::LOGICAL_OR);
	  }
	  
		return $this;
	}

	/**
	 * Code to execute before every SELECT statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreSelect(PropelPDO $con)
	{
		// soft_delete behavior
		if (sfSimpleCMSSlotQuery::isSoftDeleteEnabled() && $this->localSoftDelete) {
			$this->addUsingAlias(sfSimpleCMSSlotPeer::DELETED_AT, null, Criteria::ISNULL);
		} else {
			sfSimpleCMSSlotPeer::enableSoftDelete();
		}
		
		return $this->preSelect($con);
	}

	/**
	 * Code to execute before every DELETE statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreDelete(PropelPDO $con)
	{
		// soft_delete behavior
		if (sfSimpleCMSSlotQuery::isSoftDeleteEnabled() && $this->localSoftDelete) {
			return $this->softDelete($con);
		} else {
			return $this->hasWhereClause() ? $this->forceDelete($con) : $this->forceDeleteAll($con);
		}
		
		return $this->preDelete($con);
	}

	// soft_delete behavior
	
	/**
	 * Temporarily disable the filter on deleted rows
	 * Valid only for the current query
	 * 
	 * @see sfSimpleCMSSlotQuery::disableSoftDelete() to disable the filter for more than one query
	 *
	 * @return sfSimpleCMSSlotQuery The current query, for fuid interface
	 */
	public function includeDeleted()
	{
		$this->localSoftDelete = false;
		return $this;
	}
	
	/**
	 * Soft delete the selected rows
	 *
	 * @param			PropelPDO $con an optional connection object
	 *
	 * @return		int Number of updated rows
	 */
	public function softDelete(PropelPDO $con = null)
	{
		return $this->update(array('DeletedAt' => time()), $con);
	}
	
	/**
	 * Bypass the soft_delete behavior and force a hard delete of the selected rows
	 *
	 * @param			PropelPDO $con an optional connection object
	 *
	 * @return		int Number of deleted rows
	 */
	public function forceDelete(PropelPDO $con = null)
	{
		return sfSimpleCMSSlotPeer::doForceDelete($this, $con);
	}
	
	/**
	 * Bypass the soft_delete behavior and force a hard delete of all the rows
	 *
	 * @param			PropelPDO $con an optional connection object
	 *
	 * @return		int Number of deleted rows
	 */
	public function forceDeleteAll(PropelPDO $con = null)
	{
		return sfSimpleCMSSlotPeer::doForceDeleteAll($con);}
	
	/**
	 * Undelete selected rows
	 *
	 * @param			PropelPDO $con an optional connection object
	 *
	 * @return		int The number of rows affected by this update and any referring fk objects' save() operations.
	 */
	public function unDelete(PropelPDO $con = null)
	{
		return $this->update(array('DeletedAt' => null), $con);
	}
		
	/**
	 * Enable the soft_delete behavior for this model
	 */
	public static function enableSoftDelete()
	{
		self::$softDelete = true;
	}
	
	/**
	 * Disable the soft_delete behavior for this model
	 */
	public static function disableSoftDelete()
	{
		self::$softDelete = false;
	}
	
	/**
	 * Check the soft_delete behavior for this model
	 *
	 * @return boolean true if the soft_delete behavior is enabled
	 */
	public static function isSoftDeleteEnabled()
	{
		return self::$softDelete;
	}

	// timestampable behavior
	
	/**
	 * Filter by the latest updated
	 *
	 * @param      int $nbDays Maximum age of the latest update in days
	 *
	 * @return     sfSimpleCMSSlotQuery The current query, for fuid interface
	 */
	public function recentlyUpdated($nbDays = 7)
	{
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Filter by the latest created
	 *
	 * @param      int $nbDays Maximum age of in days
	 *
	 * @return     sfSimpleCMSSlotQuery The current query, for fuid interface
	 */
	public function recentlyCreated($nbDays = 7)
	{
		return $this->addUsingAlias(sfSimpleCMSSlotPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by update date desc
	 *
	 * @return     sfSimpleCMSSlotQuery The current query, for fuid interface
	 */
	public function lastUpdatedFirst()
	{
		return $this->addDescendingOrderByColumn(sfSimpleCMSSlotPeer::UPDATED_AT);
	}
	
	/**
	 * Order by update date asc
	 *
	 * @return     sfSimpleCMSSlotQuery The current query, for fuid interface
	 */
	public function firstUpdatedFirst()
	{
		return $this->addAscendingOrderByColumn(sfSimpleCMSSlotPeer::UPDATED_AT);
	}
	
	/**
	 * Order by create date desc
	 *
	 * @return     sfSimpleCMSSlotQuery The current query, for fuid interface
	 */
	public function lastCreatedFirst()
	{
		return $this->addDescendingOrderByColumn(sfSimpleCMSSlotPeer::CREATED_AT);
	}
	
	/**
	 * Order by create date asc
	 *
	 * @return     sfSimpleCMSSlotQuery The current query, for fuid interface
	 */
	public function firstCreatedFirst()
	{
		return $this->addAscendingOrderByColumn(sfSimpleCMSSlotPeer::CREATED_AT);
	}

} // BasesfSimpleCMSSlotQuery
