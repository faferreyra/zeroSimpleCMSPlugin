<?php


/**
 * Base class that represents a query for the 'sf_simple_cms_page' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Tue Jan 25 07:28:17 2011
 *
 * @method     sfSimpleCMSPageQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     sfSimpleCMSPageQuery orderByTitle($order = Criteria::ASC) Order by the title column
 * @method     sfSimpleCMSPageQuery orderByTitleShort($order = Criteria::ASC) Order by the title_short column
 * @method     sfSimpleCMSPageQuery orderByTopicId($order = Criteria::ASC) Order by the topic_id column
 * @method     sfSimpleCMSPageQuery orderByTemplate($order = Criteria::ASC) Order by the template column
 * @method     sfSimpleCMSPageQuery orderByMeta($order = Criteria::ASC) Order by the meta column
 * @method     sfSimpleCMSPageQuery orderByKeywords($order = Criteria::ASC) Order by the keywords column
 * @method     sfSimpleCMSPageQuery orderByIsPublished($order = Criteria::ASC) Order by the is_published column
 * @method     sfSimpleCMSPageQuery orderByIsSecure($order = Criteria::ASC) Order by the is_secure column
 * @method     sfSimpleCMSPageQuery orderByDeletedAt($order = Criteria::ASC) Order by the deleted_at column
 * @method     sfSimpleCMSPageQuery orderBySlug($order = Criteria::ASC) Order by the slug column
 * @method     sfSimpleCMSPageQuery orderByTreeLeft($order = Criteria::ASC) Order by the tree_left column
 * @method     sfSimpleCMSPageQuery orderByTreeRight($order = Criteria::ASC) Order by the tree_right column
 * @method     sfSimpleCMSPageQuery orderByTreeLevel($order = Criteria::ASC) Order by the tree_level column
 * @method     sfSimpleCMSPageQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     sfSimpleCMSPageQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     sfSimpleCMSPageQuery groupById() Group by the id column
 * @method     sfSimpleCMSPageQuery groupByTitle() Group by the title column
 * @method     sfSimpleCMSPageQuery groupByTitleShort() Group by the title_short column
 * @method     sfSimpleCMSPageQuery groupByTopicId() Group by the topic_id column
 * @method     sfSimpleCMSPageQuery groupByTemplate() Group by the template column
 * @method     sfSimpleCMSPageQuery groupByMeta() Group by the meta column
 * @method     sfSimpleCMSPageQuery groupByKeywords() Group by the keywords column
 * @method     sfSimpleCMSPageQuery groupByIsPublished() Group by the is_published column
 * @method     sfSimpleCMSPageQuery groupByIsSecure() Group by the is_secure column
 * @method     sfSimpleCMSPageQuery groupByDeletedAt() Group by the deleted_at column
 * @method     sfSimpleCMSPageQuery groupBySlug() Group by the slug column
 * @method     sfSimpleCMSPageQuery groupByTreeLeft() Group by the tree_left column
 * @method     sfSimpleCMSPageQuery groupByTreeRight() Group by the tree_right column
 * @method     sfSimpleCMSPageQuery groupByTreeLevel() Group by the tree_level column
 * @method     sfSimpleCMSPageQuery groupByCreatedAt() Group by the created_at column
 * @method     sfSimpleCMSPageQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     sfSimpleCMSPageQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     sfSimpleCMSPageQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     sfSimpleCMSPageQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     sfSimpleCMSPageQuery leftJoinsfSimpleCMSSlot($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfSimpleCMSSlot relation
 * @method     sfSimpleCMSPageQuery rightJoinsfSimpleCMSSlot($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfSimpleCMSSlot relation
 * @method     sfSimpleCMSPageQuery innerJoinsfSimpleCMSSlot($relationAlias = null) Adds a INNER JOIN clause to the query using the sfSimpleCMSSlot relation
 *
 * @method     sfSimpleCMSPage findOne(PropelPDO $con = null) Return the first sfSimpleCMSPage matching the query
 * @method     sfSimpleCMSPage findOneOrCreate(PropelPDO $con = null) Return the first sfSimpleCMSPage matching the query, or a new sfSimpleCMSPage object populated from the query conditions when no match is found
 *
 * @method     sfSimpleCMSPage findOneById(int $id) Return the first sfSimpleCMSPage filtered by the id column
 * @method     sfSimpleCMSPage findOneByTitle(string $title) Return the first sfSimpleCMSPage filtered by the title column
 * @method     sfSimpleCMSPage findOneByTitleShort(string $title_short) Return the first sfSimpleCMSPage filtered by the title_short column
 * @method     sfSimpleCMSPage findOneByTopicId(int $topic_id) Return the first sfSimpleCMSPage filtered by the topic_id column
 * @method     sfSimpleCMSPage findOneByTemplate(string $template) Return the first sfSimpleCMSPage filtered by the template column
 * @method     sfSimpleCMSPage findOneByMeta(string $meta) Return the first sfSimpleCMSPage filtered by the meta column
 * @method     sfSimpleCMSPage findOneByKeywords(string $keywords) Return the first sfSimpleCMSPage filtered by the keywords column
 * @method     sfSimpleCMSPage findOneByIsPublished(boolean $is_published) Return the first sfSimpleCMSPage filtered by the is_published column
 * @method     sfSimpleCMSPage findOneByIsSecure(boolean $is_secure) Return the first sfSimpleCMSPage filtered by the is_secure column
 * @method     sfSimpleCMSPage findOneByDeletedAt(string $deleted_at) Return the first sfSimpleCMSPage filtered by the deleted_at column
 * @method     sfSimpleCMSPage findOneBySlug(string $slug) Return the first sfSimpleCMSPage filtered by the slug column
 * @method     sfSimpleCMSPage findOneByTreeLeft(int $tree_left) Return the first sfSimpleCMSPage filtered by the tree_left column
 * @method     sfSimpleCMSPage findOneByTreeRight(int $tree_right) Return the first sfSimpleCMSPage filtered by the tree_right column
 * @method     sfSimpleCMSPage findOneByTreeLevel(int $tree_level) Return the first sfSimpleCMSPage filtered by the tree_level column
 * @method     sfSimpleCMSPage findOneByCreatedAt(string $created_at) Return the first sfSimpleCMSPage filtered by the created_at column
 * @method     sfSimpleCMSPage findOneByUpdatedAt(string $updated_at) Return the first sfSimpleCMSPage filtered by the updated_at column
 *
 * @method     array findById(int $id) Return sfSimpleCMSPage objects filtered by the id column
 * @method     array findByTitle(string $title) Return sfSimpleCMSPage objects filtered by the title column
 * @method     array findByTitleShort(string $title_short) Return sfSimpleCMSPage objects filtered by the title_short column
 * @method     array findByTopicId(int $topic_id) Return sfSimpleCMSPage objects filtered by the topic_id column
 * @method     array findByTemplate(string $template) Return sfSimpleCMSPage objects filtered by the template column
 * @method     array findByMeta(string $meta) Return sfSimpleCMSPage objects filtered by the meta column
 * @method     array findByKeywords(string $keywords) Return sfSimpleCMSPage objects filtered by the keywords column
 * @method     array findByIsPublished(boolean $is_published) Return sfSimpleCMSPage objects filtered by the is_published column
 * @method     array findByIsSecure(boolean $is_secure) Return sfSimpleCMSPage objects filtered by the is_secure column
 * @method     array findByDeletedAt(string $deleted_at) Return sfSimpleCMSPage objects filtered by the deleted_at column
 * @method     array findBySlug(string $slug) Return sfSimpleCMSPage objects filtered by the slug column
 * @method     array findByTreeLeft(int $tree_left) Return sfSimpleCMSPage objects filtered by the tree_left column
 * @method     array findByTreeRight(int $tree_right) Return sfSimpleCMSPage objects filtered by the tree_right column
 * @method     array findByTreeLevel(int $tree_level) Return sfSimpleCMSPage objects filtered by the tree_level column
 * @method     array findByCreatedAt(string $created_at) Return sfSimpleCMSPage objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return sfSimpleCMSPage objects filtered by the updated_at column
 *
 * @package    propel.generator.plugins.zeroSimpleCMSPlugin.lib.model.om
 */
abstract class BasesfSimpleCMSPageQuery extends ModelCriteria
{

	// soft_delete behavior
	protected static $softDelete = true;
	protected $localSoftDelete = true;

	/**
	 * Initializes internal state of BasesfSimpleCMSPageQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'sfSimpleCMSPage', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new sfSimpleCMSPageQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    sfSimpleCMSPageQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof sfSimpleCMSPageQuery) {
			return $criteria;
		}
		$query = new sfSimpleCMSPageQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    sfSimpleCMSPage|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = sfSimpleCMSPagePeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(sfSimpleCMSPagePeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(sfSimpleCMSPagePeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the title column
	 * 
	 * @param     string $title The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByTitle($title = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($title)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $title)) {
				$title = str_replace('*', '%', $title);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::TITLE, $title, $comparison);
	}

	/**
	 * Filter the query on the title_short column
	 * 
	 * @param     string $titleShort The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByTitleShort($titleShort = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($titleShort)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $titleShort)) {
				$titleShort = str_replace('*', '%', $titleShort);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::TITLE_SHORT, $titleShort, $comparison);
	}

	/**
	 * Filter the query on the topic_id column
	 * 
	 * @param     int|array $topicId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByTopicId($topicId = null, $comparison = null)
	{
		if (is_array($topicId)) {
			$useMinMax = false;
			if (isset($topicId['min'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::TOPIC_ID, $topicId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($topicId['max'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::TOPIC_ID, $topicId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::TOPIC_ID, $topicId, $comparison);
	}

	/**
	 * Filter the query on the template column
	 * 
	 * @param     string $template The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByTemplate($template = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($template)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $template)) {
				$template = str_replace('*', '%', $template);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::TEMPLATE, $template, $comparison);
	}

	/**
	 * Filter the query on the meta column
	 * 
	 * @param     string $meta The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByMeta($meta = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($meta)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $meta)) {
				$meta = str_replace('*', '%', $meta);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::META, $meta, $comparison);
	}

	/**
	 * Filter the query on the keywords column
	 * 
	 * @param     string $keywords The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByKeywords($keywords = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($keywords)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $keywords)) {
				$keywords = str_replace('*', '%', $keywords);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::KEYWORDS, $keywords, $comparison);
	}

	/**
	 * Filter the query on the is_published column
	 * 
	 * @param     boolean|string $isPublished The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByIsPublished($isPublished = null, $comparison = null)
	{
		if (is_string($isPublished)) {
			$is_published = in_array(strtolower($isPublished), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::IS_PUBLISHED, $isPublished, $comparison);
	}

	/**
	 * Filter the query on the is_secure column
	 * 
	 * @param     boolean|string $isSecure The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByIsSecure($isSecure = null, $comparison = null)
	{
		if (is_string($isSecure)) {
			$is_secure = in_array(strtolower($isSecure), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::IS_SECURE, $isSecure, $comparison);
	}

	/**
	 * Filter the query on the deleted_at column
	 * 
	 * @param     string|array $deletedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByDeletedAt($deletedAt = null, $comparison = null)
	{
		if (is_array($deletedAt)) {
			$useMinMax = false;
			if (isset($deletedAt['min'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::DELETED_AT, $deletedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($deletedAt['max'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::DELETED_AT, $deletedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::DELETED_AT, $deletedAt, $comparison);
	}

	/**
	 * Filter the query on the slug column
	 * 
	 * @param     string $slug The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterBySlug($slug = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($slug)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $slug)) {
				$slug = str_replace('*', '%', $slug);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::SLUG, $slug, $comparison);
	}

	/**
	 * Filter the query on the tree_left column
	 * 
	 * @param     int|array $treeLeft The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByTreeLeft($treeLeft = null, $comparison = null)
	{
		if (is_array($treeLeft)) {
			$useMinMax = false;
			if (isset($treeLeft['min'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::TREE_LEFT, $treeLeft['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($treeLeft['max'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::TREE_LEFT, $treeLeft['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::TREE_LEFT, $treeLeft, $comparison);
	}

	/**
	 * Filter the query on the tree_right column
	 * 
	 * @param     int|array $treeRight The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByTreeRight($treeRight = null, $comparison = null)
	{
		if (is_array($treeRight)) {
			$useMinMax = false;
			if (isset($treeRight['min'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::TREE_RIGHT, $treeRight['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($treeRight['max'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::TREE_RIGHT, $treeRight['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::TREE_RIGHT, $treeRight, $comparison);
	}

	/**
	 * Filter the query on the tree_level column
	 * 
	 * @param     int|array $treeLevel The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByTreeLevel($treeLevel = null, $comparison = null)
	{
		if (is_array($treeLevel)) {
			$useMinMax = false;
			if (isset($treeLevel['min'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::TREE_LEVEL, $treeLevel['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($treeLevel['max'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::TREE_LEVEL, $treeLevel['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::TREE_LEVEL, $treeLevel, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $createdAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 * 
	 * @param     string|array $updatedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(sfSimpleCMSPagePeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfSimpleCMSPagePeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related sfSimpleCMSSlot object
	 *
	 * @param     sfSimpleCMSSlot $sfSimpleCMSSlot  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function filterBysfSimpleCMSSlot($sfSimpleCMSSlot, $comparison = null)
	{
		return $this
			->addUsingAlias(sfSimpleCMSPagePeer::ID, $sfSimpleCMSSlot->getPageId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the sfSimpleCMSSlot relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function joinsfSimpleCMSSlot($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('sfSimpleCMSSlot');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'sfSimpleCMSSlot');
		}
		
		return $this;
	}

	/**
	 * Use the sfSimpleCMSSlot relation sfSimpleCMSSlot object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfSimpleCMSSlotQuery A secondary query class using the current class as primary query
	 */
	public function usesfSimpleCMSSlotQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinsfSimpleCMSSlot($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'sfSimpleCMSSlot', 'sfSimpleCMSSlotQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     sfSimpleCMSPage $sfSimpleCMSPage Object to remove from the list of results
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fluid interface
	 */
	public function prune($sfSimpleCMSPage = null)
	{
		if ($sfSimpleCMSPage) {
			$this->addUsingAlias(sfSimpleCMSPagePeer::ID, $sfSimpleCMSPage->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

	/**
	 * Code to execute before every SELECT statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreSelect(PropelPDO $con)
	{
		// soft_delete behavior
		if (sfSimpleCMSPageQuery::isSoftDeleteEnabled() && $this->localSoftDelete) {
			$this->addUsingAlias(sfSimpleCMSPagePeer::DELETED_AT, null, Criteria::ISNULL);
		} else {
			sfSimpleCMSPagePeer::enableSoftDelete();
		}
		
		return $this->preSelect($con);
	}

	/**
	 * Code to execute before every DELETE statement
	 * 
	 * @param     PropelPDO $con The connection object used by the query
	 */
	protected function basePreDelete(PropelPDO $con)
	{
		// soft_delete behavior
		if (sfSimpleCMSPageQuery::isSoftDeleteEnabled() && $this->localSoftDelete) {
			return $this->softDelete($con);
		} else {
			return $this->hasWhereClause() ? $this->forceDelete($con) : $this->forceDeleteAll($con);
		}
		
		return $this->preDelete($con);
	}

	// soft_delete behavior
	
	/**
	 * Temporarily disable the filter on deleted rows
	 * Valid only for the current query
	 * 
	 * @see sfSimpleCMSPageQuery::disableSoftDelete() to disable the filter for more than one query
	 *
	 * @return sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function includeDeleted()
	{
		$this->localSoftDelete = false;
		return $this;
	}
	
	/**
	 * Soft delete the selected rows
	 *
	 * @param			PropelPDO $con an optional connection object
	 *
	 * @return		int Number of updated rows
	 */
	public function softDelete(PropelPDO $con = null)
	{
		return $this->update(array('DeletedAt' => time()), $con);
	}
	
	/**
	 * Bypass the soft_delete behavior and force a hard delete of the selected rows
	 *
	 * @param			PropelPDO $con an optional connection object
	 *
	 * @return		int Number of deleted rows
	 */
	public function forceDelete(PropelPDO $con = null)
	{
		return sfSimpleCMSPagePeer::doForceDelete($this, $con);
	}
	
	/**
	 * Bypass the soft_delete behavior and force a hard delete of all the rows
	 *
	 * @param			PropelPDO $con an optional connection object
	 *
	 * @return		int Number of deleted rows
	 */
	public function forceDeleteAll(PropelPDO $con = null)
	{
		return sfSimpleCMSPagePeer::doForceDeleteAll($con);}
	
	/**
	 * Undelete selected rows
	 *
	 * @param			PropelPDO $con an optional connection object
	 *
	 * @return		int The number of rows affected by this update and any referring fk objects' save() operations.
	 */
	public function unDelete(PropelPDO $con = null)
	{
		return $this->update(array('DeletedAt' => null), $con);
	}
		
	/**
	 * Enable the soft_delete behavior for this model
	 */
	public static function enableSoftDelete()
	{
		self::$softDelete = true;
	}
	
	/**
	 * Disable the soft_delete behavior for this model
	 */
	public static function disableSoftDelete()
	{
		self::$softDelete = false;
	}
	
	/**
	 * Check the soft_delete behavior for this model
	 *
	 * @return boolean true if the soft_delete behavior is enabled
	 */
	public static function isSoftDeleteEnabled()
	{
		return self::$softDelete;
	}

	// sluggable behavior
	
	/**
	 * Find one object based on its slug
	 * 
	 * @param     string $slug The value to use as filter.
	 * @param     PropelPDO $con The optional connection object
	 *
	 * @return    sfSimpleCMSPage the result, formatted by the current formatter
	 */
	public function findOneBySlug($slug, $con = null)
	{
		return $this->filterBySlug($slug)->findOne($con);
	}

	// nested_set behavior
	
	/**
	 * Filter the query to restrict the result to descendants of an object
	 *
	 * @param     sfSimpleCMSPage $sfSimpleCMSPage The object to use for descendant search
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function descendantsOf($sfSimpleCMSPage)
	{
		return $this
			->addUsingAlias(sfSimpleCMSPagePeer::LEFT_COL, $sfSimpleCMSPage->getLeftValue(), Criteria::GREATER_THAN)
			->addUsingAlias(sfSimpleCMSPagePeer::LEFT_COL, $sfSimpleCMSPage->getRightValue(), Criteria::LESS_THAN);
	}
	
	/**
	 * Filter the query to restrict the result to the branch of an object.
	 * Same as descendantsOf(), except that it includes the object passed as parameter in the result
	 *
	 * @param     sfSimpleCMSPage $sfSimpleCMSPage The object to use for branch search
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function branchOf($sfSimpleCMSPage)
	{
		return $this
			->addUsingAlias(sfSimpleCMSPagePeer::LEFT_COL, $sfSimpleCMSPage->getLeftValue(), Criteria::GREATER_EQUAL)
			->addUsingAlias(sfSimpleCMSPagePeer::LEFT_COL, $sfSimpleCMSPage->getRightValue(), Criteria::LESS_EQUAL);
	}
	
	/**
	 * Filter the query to restrict the result to children of an object
	 *
	 * @param     sfSimpleCMSPage $sfSimpleCMSPage The object to use for child search
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function childrenOf($sfSimpleCMSPage)
	{
		return $this
			->descendantsOf($sfSimpleCMSPage)
			->addUsingAlias(sfSimpleCMSPagePeer::LEVEL_COL, $sfSimpleCMSPage->getLevel() + 1, Criteria::EQUAL);
	}
	
	/**
	 * Filter the query to restrict the result to siblings of an object.
	 * The result does not include the object passed as parameter.
	 *
	 * @param     sfSimpleCMSPage $sfSimpleCMSPage The object to use for sibling search
	 * @param      PropelPDO $con Connection to use.
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function siblingsOf($sfSimpleCMSPage, PropelPDO $con = null)
	{
		if ($sfSimpleCMSPage->isRoot()) {
			return $this->
				add(sfSimpleCMSPagePeer::LEVEL_COL, '1<>1', Criteria::CUSTOM);
		} else {
			return $this
				->childrenOf($sfSimpleCMSPage->getParent($con))
				->prune($sfSimpleCMSPage);
		}
	}
	
	/**
	 * Filter the query to restrict the result to ancestors of an object
	 *
	 * @param     sfSimpleCMSPage $sfSimpleCMSPage The object to use for ancestors search
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function ancestorsOf($sfSimpleCMSPage)
	{
		return $this
			->addUsingAlias(sfSimpleCMSPagePeer::LEFT_COL, $sfSimpleCMSPage->getLeftValue(), Criteria::LESS_THAN)
			->addUsingAlias(sfSimpleCMSPagePeer::RIGHT_COL, $sfSimpleCMSPage->getRightValue(), Criteria::GREATER_THAN);
	}
	
	/**
	 * Filter the query to restrict the result to roots of an object.
	 * Same as ancestorsOf(), except that it includes the object passed as parameter in the result
	 *
	 * @param     sfSimpleCMSPage $sfSimpleCMSPage The object to use for roots search
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function rootsOf($sfSimpleCMSPage)
	{
		return $this
			->addUsingAlias(sfSimpleCMSPagePeer::LEFT_COL, $sfSimpleCMSPage->getLeftValue(), Criteria::LESS_EQUAL)
			->addUsingAlias(sfSimpleCMSPagePeer::RIGHT_COL, $sfSimpleCMSPage->getRightValue(), Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order the result by branch, i.e. natural tree order
	 *
	 * @param     bool $reverse if true, reverses the order
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function orderByBranch($reverse = false)
	{
		if ($reverse) {
			return $this
				->addDescendingOrderByColumn(sfSimpleCMSPagePeer::LEFT_COL);
		} else {
			return $this
				->addAscendingOrderByColumn(sfSimpleCMSPagePeer::LEFT_COL);
		}
	}
	
	/**
	 * Order the result by level, the closer to the root first
	 *
	 * @param     bool $reverse if true, reverses the order
	 *
	 * @return    sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function orderByLevel($reverse = false)
	{
		if ($reverse) {
			return $this
				->addAscendingOrderByColumn(sfSimpleCMSPagePeer::RIGHT_COL);
		} else {
			return $this
				->addDescendingOrderByColumn(sfSimpleCMSPagePeer::RIGHT_COL);
		}
	}
	
	/**
	 * Returns the root node for the tree
	 *
	 * @param      PropelPDO $con	Connection to use.
	 *
	 * @return     sfSimpleCMSPage The tree root object
	 */
	public function findRoot($con = null)
	{
		return $this
			->addUsingAlias(sfSimpleCMSPagePeer::LEFT_COL, 1, Criteria::EQUAL)
			->findOne($con);
	}
	
	/**
	 * Returns the tree of objects
	 *
	 * @param      PropelPDO $con	Connection to use.
	 *
	 * @return     mixed the list of results, formatted by the current formatter
	 */
	public function findTree($con = null)
	{
		return $this
			->orderByBranch()
			->find($con);
	}

	// timestampable behavior
	
	/**
	 * Filter by the latest updated
	 *
	 * @param      int $nbDays Maximum age of the latest update in days
	 *
	 * @return     sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function recentlyUpdated($nbDays = 7)
	{
		return $this->addUsingAlias(sfSimpleCMSPagePeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Filter by the latest created
	 *
	 * @param      int $nbDays Maximum age of in days
	 *
	 * @return     sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function recentlyCreated($nbDays = 7)
	{
		return $this->addUsingAlias(sfSimpleCMSPagePeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by update date desc
	 *
	 * @return     sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function lastUpdatedFirst()
	{
		return $this->addDescendingOrderByColumn(sfSimpleCMSPagePeer::UPDATED_AT);
	}
	
	/**
	 * Order by update date asc
	 *
	 * @return     sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function firstUpdatedFirst()
	{
		return $this->addAscendingOrderByColumn(sfSimpleCMSPagePeer::UPDATED_AT);
	}
	
	/**
	 * Order by create date desc
	 *
	 * @return     sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function lastCreatedFirst()
	{
		return $this->addDescendingOrderByColumn(sfSimpleCMSPagePeer::CREATED_AT);
	}
	
	/**
	 * Order by create date asc
	 *
	 * @return     sfSimpleCMSPageQuery The current query, for fuid interface
	 */
	public function firstCreatedFirst()
	{
		return $this->addAscendingOrderByColumn(sfSimpleCMSPagePeer::CREATED_AT);
	}

} // BasesfSimpleCMSPageQuery
